# Nama Workflow yang akan muncul di GitHub Actions
name: Flutter Build & Optimize

# Trigger: Kapan workflow ini dijalankan?
on:
  # 1. Jalankan otomatis saat ada push ke branch main/master
  push:
    branches: [ main, master ]

  # 2. Jalankan otomatis saat ada Pull Request yang menargetkan main/master
  pull_request:
    branches: [ main, master ]

  # 3. Izinkan untuk dijalankan secara manual dari halaman Actions
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Pilih jenis build yang ingin dijalankan'
        required: true
        # PERUBAHAN: Default untuk manual run adalah 'all' agar semua build diuji
        default: 'all'
        type: choice
        options:
          - quick_apk          # Cepat: Hanya build APK dasar untuk testing
          - full_release_aab   # Lengkap: Build AAB & APK ter-optimasi untuk rilis
          - all                # Jalankan semua jenis build
      flutter_channel:
        description: 'Pilih channel Flutter'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - master

# Variabel lingkungan global
env:
  JAVA_TOOL_OPTIONS: -Xmx4g # Berikan lebih banyak memori untuk Gradle
  FLUTTER_CHANNEL: ${{ github.event.inputs.flutter_channel || 'stable' }}
  # PERUBAHAN: Default untuk otomatis (push/PR) adalah 'quick_apk' untuk pengujian cepat
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'quick_apk' }}

# Definisi Job
jobs:
  build:
    name: Build & Analyze
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: write # Diperlukan untuk mengunggah artefak

    steps:
      # Langkah 1: Checkout kode sumber
      - name: Checkout repository
        uses: actions/checkout@v4

      # Langkah 2: Setup Java JDK
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Langkah 3: Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # Langkah 4: Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true

      # Langkah 5: Install dependensi Flutter
      - name: Install Flutter dependencies
        run: flutter pub get

      # --- LOGIKA BUILD KONDISIONAL ---
      # PERUBAHAN BESAR: Kami tidak lagi mengubah gradle.properties dari sini.
      # Semua konfigurasi build (minify, proguard) sekarang 100% diatur
      # di dalam file `android/app/build.gradle` dan `android/app/proguard-rules.pro`.
      # Ini membuat proyek lebih mandiri dan build lebih konsisten.

      # Build 1: APK Cepat (untuk testing cepat)
      # Build ini akan menggunakan minifikasi karena `minifyEnabled true` di build.gradle
      # dan akan berhasil jika aturan ProGuard sudah benar.
      - name: ðŸš€ Build Quick APK (arm64)
        if: env.BUILD_TYPE == 'quick_apk' || env.BUILD_TYPE == 'all'
        run: |
          echo "Building quick APK for arm64..."
          flutter build apk --release --target-platform android-arm64

      # Build 2: AAB Rilis Lengkap (untuk publikasi ke Play Store)
      - name: ðŸ“¦ Build Full Release AAB (with Obfuscation + minify)
        if: env.BUILD_TYPE == 'full_release_aab' || env.BUILD_TYPE == 'all'
        run: |
          echo "Building optimized AAB for release..."
          flutter build appbundle \
            --release \
            --target-platform android-arm64 \
            --obfuscate \
            --split-debug-info=build/symbols \
            --tree-shake-icons

      # Build 3: APK Split-per-ABI (untuk distribusi manual)
      - name: ðŸ“± Build Split-per-ABI APKs (with Obfuscation + minify)
        if: env.BUILD_TYPE == 'full_release_aab' || env.BUILD_TYPE == 'all'
        run: |
          echo "Building optimized split-per-ABI APKs..."
          flutter build apk \
            --release \
            --split-per-abi \
            --obfuscate \
            --split-debug-info=build/symbols \
            --tree-shake-icons

      # --- UPLOAD ARTEFAK ---
      - name: Upload Build Artifacts
        if: always() # Pastikan langkah ini tetap berjalan meskipun build gagal
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ env.BUILD_TYPE }}-${{ github.run_number }}
          path: |
            build/app/outputs/**/*.apk
            build/app/outputs/**/*.aab
            build/**/app_size_*.json
            build/symbols/**
          if-no-files-found: warn