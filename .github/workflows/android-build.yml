name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master, optimize/android-size ]

permissions:
  contents: read

jobs:
  build-apk:
    runs-on: ubuntu-latest
    env:
      # Use a runner-writable SDK root under HOME to avoid permission issues when restoring caches
      ANDROID_SDK_ROOT: $HOME/android-sdk
      JAVA_TOOL_OPTIONS: -Xmx4g
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java JDK (Java 11 for sdkmanager compatibility)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          # intentionally not pinning flutter-version to allow GitHub runner to use latest stable Flutter
          # which provides a newer Dart SDK compatible with current plugin versions

      # NOTE: caching the full Android SDK (especially under /usr/local or a system path)
      # can produce permission/utime issues when the cache is restored. We avoid caching
      # the SDK here to ensure a clean cmdline-tools install on each run.

      - name: Repair Android SDK permissions after cache restore
        if: always()
        run: |
          set -euo pipefail
          echo "Fixing ownership and permissions for ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          # Make sure the SDK root exists
          sudo mkdir -p "$ANDROID_SDK_ROOT"
          # Ensure the runner user owns the SDK tree and can write/read as needed
          sudo chown -R $(id -u):$(id -g) "$ANDROID_SDK_ROOT" || true
          sudo chmod -R a+rX "$ANDROID_SDK_ROOT" || true
          echo "Ownership/permissions fixed. Summary (top-level):"
          ls -la "$ANDROID_SDK_ROOT" || true

      - name: Setup Android SDK and required components
        uses: google-github-actions/setup-android@v2
        with:
          sdk_root: ${{ env.ANDROID_SDK_ROOT }}
          components: |
            platform-tools
            platforms;android-33
            build-tools;33.0.2
          accept-licenses: true
          update: true

      - name: Collect sdkmanager debug info and logs
        if: always()
        run: |
          set -euo pipefail
          echo "Collecting sdkmanager logs and environment snapshot"
          echo "SDK root: $ANDROID_SDK_ROOT" > sdk_snapshot.txt
          echo "Top-level SDK contents:" >> sdk_snapshot.txt
          ls -la "$ANDROID_SDK_ROOT" >> sdk_snapshot.txt || true
          echo "Disk usage:" > disk_usage.txt
          df -h >> disk_usage.txt || true
          # Append last 500 lines of any sdkmanager logs
          for f in sdkmanager_*.log; do
            if [ -f "$f" ]; then
              echo "---- $f ----" >> sdk_snapshot.txt
              tail -n 500 "$f" >> sdk_snapshot.txt
            fi
          done

      - name: Upload sdkmanager logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sdkmanager-logs
          path: |
            sdk_snapshot.txt
            disk_usage.txt
            sdkmanager_*.log
          if-no-files-found: warn

      - name: Install dependencies
        run: |
          # Debug info
          echo "Current directory structure:"
          pwd
          ls -la
          
          echo "Environment variables:"
          env
          
          echo "Flutter and Dart versions:"
          flutter --version
          dart --version
          
          # Try running pub get with full debug output
          echo "Running pub get with debug..."
          flutter pub get --verbose 2>&1 | tee pub_get_log.txt
          
          if [ $? -ne 0 ]; then
            echo "Error during pub get. Detailed debugging:"
            echo "1. Checking pubspec.yaml..."
            cat pubspec.yaml
            
            echo "2. Running pub outdated to check compatibility..."
            flutter pub outdated || true
            
            echo "3. Running pub deps to show dependency tree..."
            flutter pub deps || true
            
            echo "4. Checking for conflicting dependencies..."
            flutter pub deps | grep -i conflict || true
            
            echo "5. Full pub get log:"
            cat pub_get_log.txt
            
            exit 1
          fi
          
      - name: Generate launcher icons
        run: |
          if [ -f "pubspec.yaml" ] && grep -q "flutter_launcher_icons:" "pubspec.yaml"; then
            flutter pub run flutter_launcher_icons:main
          fi

      - name: Build APK (arm64)
        run: |
          set -euo pipefail
          echo "=== flutter doctor ==="
          flutter doctor -v || true
          echo "=== flutter clean ==="
          flutter clean || true
          echo "=== flutter pub get ==="
          flutter pub get --verbose || true
          echo "=== flutter build apk (arm64) - start ==="
          # Capture full build output to a log file for debugging
          flutter build apk --release --target-platform android-arm64 --no-shrink --verbose > build_apk_arm64.log 2>&1
          BUILD_EXIT_CODE=$?
          echo "Build exit code: $BUILD_EXIT_CODE"
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "flutter build failed; printing last 500 lines of log for quick inspection"
            tail -n 500 build_apk_arm64.log || true
            exit $BUILD_EXIT_CODE
          fi
          echo "--- Last 200 lines of build log ---"
          tail -n 200 build_apk_arm64.log || true
      - name: List build outputs (debug)
        run: |
          echo "Listing build/app/outputs"
          ls -la build/app/outputs || true
          echo "Recursively listing APK files"
          find build/app/outputs -type f -name "*.apk" -print || true

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: apk-artifacts
          path: |
            build/app/outputs/**/*.apk
          if-no-files-found: warn

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build_apk_arm64.log
            build/**
          if-no-files-found: warn

  optimize-size:
    name: Optimize Android size (AAB + split-per-abi)
    runs-on: ubuntu-latest
    needs: build-apk
    if: github.ref == 'refs/heads/optimize/android-size' || startsWith(github.head_ref, 'optimize/android-size')
    env:
      JAVA_TOOL_OPTIONS: -Xmx4g
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Debug Gradle assembleRelease (stacktrace)
        continue-on-error: true
        run: |
          set -euo pipefail
          cd android
          ./gradlew assembleRelease --stacktrace --no-daemon > ../gradle_assemble_release.log 2>&1 || true

      - name: Upload Gradle debug log
        uses: actions/upload-artifact@v4
        with:
          name: gradle-debug-log
          path: gradle_assemble_release.log

      - name: Build AppBundle and analyze size
        run: flutter build appbundle --release --analyze-size

      - name: Build split-per-ABI APKs
        run: flutter build apk --release --split-per-abi --target-platform android-arm,android-arm64 --tree-shake-icons

      - name: Upload artifacts (AAB, APKs, size report)
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: |
            build/app/outputs/**/*.aab
            build/app/outputs/**/*.apk
            build/**/app_size_*.json
