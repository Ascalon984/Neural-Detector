name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master, optimize/android-size ]

permissions:
  contents: read

jobs:
  build-apk:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      JAVA_TOOL_OPTIONS: -Xmx4g
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          # intentionally not pinning flutter-version to allow GitHub runner to use latest stable Flutter
          # which provides a newer Dart SDK compatible with current plugin versions

      - name: Cache Android SDK cmdline-tools and NDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
            ${{ env.ANDROID_SDK_ROOT }}/ndk
          key: ${{ runner.os }}-android-sdk-${{ hashFiles('**/pubspec.lock') }}

      - name: Install Android SDK command-line tools (robust)
        run: |
          set -euo pipefail
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            echo 'Downloading Android cmdline-tools (with resume)'
            curl -C - -sSfL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o tools.zip
            unzip -q tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
            mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
          else
            echo 'cmdline-tools already present in cache'
          fi

      - name: Install Android SDK components (with retry)
        run: |
          set -euo pipefail
          PKGS=("platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;27.0.12077973")
          MAX_RETRIES=3
          for pkg in "${PKGS[@]}"; do
            i=0
            until [ $i -ge $MAX_RETRIES ]; do
              echo "Installing $pkg (attempt $((i+1))/$MAX_RETRIES)..."
              if yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --no_https "$pkg"; then
                echo "Installed $pkg"
                break
              fi
              i=$((i+1))
              echo "Install $pkg failed, retrying in 10s..."
              sleep 10
            done
            if [ $i -ge $MAX_RETRIES ]; then
              echo "Failed to install $pkg after $MAX_RETRIES attempts"
              # If platform-tools fails via sdkmanager repeatedly, try direct download
              if [ "$pkg" = "platform-tools" ]; then
                echo "Attempting direct download of platform-tools as fallback"
                mkdir -p $ANDROID_SDK_ROOT/platform-tools
                # download with resume support and overwrite quietly when extracting
                curl -C - -sSfL https://dl.google.com/android/repository/platform-tools-latest-linux.zip -o platform-tools.zip
                unzip -oq platform-tools.zip -d $ANDROID_SDK_ROOT
                echo "Platform-tools extracted (fallback)"
                break
              fi
              exit 1
            fi
          done
          echo "Accepting licenses"
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses || true

      - name: Install dependencies
        run: |
          # Debug info
          echo "Current directory structure:"
          pwd
          ls -la
          
          echo "Environment variables:"
          env
          
          echo "Flutter and Dart versions:"
          flutter --version
          dart --version
          
          # Try running pub get with full debug output
          echo "Running pub get with debug..."
          flutter pub get --verbose 2>&1 | tee pub_get_log.txt
          
          if [ $? -ne 0 ]; then
            echo "Error during pub get. Detailed debugging:"
            echo "1. Checking pubspec.yaml..."
            cat pubspec.yaml
            
            echo "2. Running pub outdated to check compatibility..."
            flutter pub outdated || true
            
            echo "3. Running pub deps to show dependency tree..."
            flutter pub deps || true
            
            echo "4. Checking for conflicting dependencies..."
            flutter pub deps | grep -i conflict || true
            
            echo "5. Full pub get log:"
            cat pub_get_log.txt
            
            exit 1
          fi
          
      - name: Generate launcher icons
        run: |
          if [ -f "pubspec.yaml" ] && grep -q "flutter_launcher_icons:" "pubspec.yaml"; then
            flutter pub run flutter_launcher_icons:main
          fi

      - name: Build APK (arm64)
        run: |
          flutter doctor -v
          flutter clean
          flutter pub get
          flutter build apk --release --target-platform android-arm64 --no-shrink --verbose
      - name: List build outputs (debug)
        run: |
          echo "Listing build/app/outputs"
          ls -la build/app/outputs || true
          echo "Recursively listing APK files"
          find build/app/outputs -type f -name "*.apk" -print || true

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: apk-artifacts
          path: |
            build/app/outputs/**/*.apk
          if-no-files-found: warn

  optimize-size:
    name: Optimize Android size (AAB + split-per-abi)
    runs-on: ubuntu-latest
    needs: build-apk
    if: github.ref == 'refs/heads/optimize/android-size' || startsWith(github.head_ref, 'optimize/android-size')
    env:
      JAVA_TOOL_OPTIONS: -Xmx4g
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Debug Gradle assembleRelease (stacktrace)
        continue-on-error: true
        run: |
          set -euo pipefail
          cd android
          ./gradlew assembleRelease --stacktrace --no-daemon > ../gradle_assemble_release.log 2>&1 || true

      - name: Upload Gradle debug log
        uses: actions/upload-artifact@v4
        with:
          name: gradle-debug-log
          path: gradle_assemble_release.log

      - name: Build AppBundle and analyze size
        run: flutter build appbundle --release --analyze-size

      - name: Build split-per-ABI APKs
        run: flutter build apk --release --split-per-abi --target-platform android-arm,android-arm64 --tree-shake-icons

      - name: Upload artifacts (AAB, APKs, size report)
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: |
            build/app/outputs/**/*.aab
            build/app/outputs/**/*.apk
            build/**/app_size_*.json
